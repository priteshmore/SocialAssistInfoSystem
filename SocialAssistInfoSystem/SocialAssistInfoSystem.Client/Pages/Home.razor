@page "/"
@using MudBlazor
@using Microsoft.AspNetCore.Authorization
@using SocialAssistInfoSystem.Client.Data
@using System.Collections.ObjectModel
@using SocialAssistInfoSystem.Client.Util
@* @attribute [Authorize] *@
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<PageTitle>Home</PageTitle>

<AuthorizeView>
    @*  <MudText Color="Color.Success" Class="mb-4">Hello @context.User.Identity?.Name!</MudText> *@

    <MudPaper Class="pa-16 ma-2" Elevation="0">
        <MudFab  Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileDocument" Label="Application for Scheme" Href="/application" />
    </MudPaper>
</AuthorizeView>



@if (Elements!=null)
{
    <MudStack Row="true">
        <MudTextField @bind-Value="searchString" Label="Search" Variant="Variant.Text" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" OnBlur="ApplyFilter" />

        <MudButton OnClick="ApplyFilter" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.FilterList">
            Apply Filter
        </MudButton>
    </MudStack>
    <MudPaper Class="p-4">
        <MudTable Items="@FilteredItems" @ref="table" @bind-Page="currentPage"
        Bordered="true"
        Hover="true"
        Breakpoint="Breakpoint.Sm"
        Elevation="2"

        RowsPerPage="2">
            <ToolBarContent>
                <MudButton Color="Color.Primary" OnClick="OpenAddDialog">Add</MudButton>
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>FirstName</MudTh>
                <MudTh>MiddleName</MudTh>
                <MudTh>LastName</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="First Name">
                    @context.Id
                </MudTd>
                <MudTd DataLabel="First Name">
                        @context.FirstName
                </MudTd>
                <MudTd DataLabel="Middle Name">
                        @context.MiddleName
                </MudTd>
                <MudTd DataLabel="Last Name">
                    @if (selectedApplicationItem == context)
                    {
                        <MudTextField @bind-Value="@context.LastName" />
                    }
                    else
                    {
                        @context.LastName
                    }
                </MudTd>
                @*  <MudTd DataLabel="Age">
                    <MudNumericField T="int" @bind-Value="@context.LastName" />
                </MudTd> *@
                <MudTd>


                    <MudButton StartIcon="@Icons.Material.Filled.Edit"
                    OnClick="() => OpenEditDialog(context)"
                    Color="Color.Info"
                    Variant="Variant.Filled"
                    Size="Size.Small">
                        Edit
                    </MudButton>

                    <MudButton Icon="@Icons.Material.Filled.Delete" OnClick="() => Delete(context)" Color="Color.Error" Variant="Variant.Filled" Size="Size.Small" >Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>

}
else
{
    <h1>Loading...</h1>}



@code {
    private MudTable<ApplicationItem> table;
    private ObservableCollection<ApplicationItem> Elements = new ObservableCollection<ApplicationItem>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;
    private ApplicationItem? selectedApplicationItem;

    private int currentPage = 0;


    private ObservableCollection<ApplicationItem> FilteredItems = new();
    private string searchString = string.Empty;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            List<ApplicationItem> lstData = new List<ApplicationItem>();

            ApplicationItem obj = new ApplicationItem();
            obj.Id = 0;
            obj.FirstName = "Pritesh";
            obj.MiddleName = "Pradeep";
            obj.LastName = "More";

            lstData.Add(obj);
            lstData.Add(obj);
            lstData.Add(obj);
            lstData.Add(obj);
            lstData.Add(obj);
            Elements= new ObservableCollection<ApplicationItem>(lstData);
            FilteredItems = Elements;
            // Elements = await httpClient.GetFromJsonAsync<List<ApplicationItem>>("webapi/periodictable");

            StateHasChanged(); // Re-render after data load
        }
    }

    #region Operation
    void Delete(ApplicationItem Item)
    {
        Elements.Remove(Item);
        FilteredItems = Elements;
        Snackbar.Add("Person deleted", Severity.Warning);
    }

    void Save(ApplicationItem Item)
    {
        Snackbar.Add($"FirstName: {Item.FirstName}, MiddleName: {Item.MiddleName}", Severity.Success);
    }

    private async Task OpenEditDialog(ApplicationItem Item)
    {
        var parameters = new DialogParameters { ["Item"] = new ApplicationItem {
            FirstName = Item.FirstName,
            MiddleName = Item.MiddleName,
            LastName = Item.LastName
        } };

        var dialog = DialogService.Show<EditApplicationDailog>("Edit Application", parameters);
        DialogResult? result = await dialog.Result;

        if (!result.Canceled)
        {
            var updated = (ApplicationItem)result.Data;
            var index = Elements.ToList().FindIndex(p => p.FirstName == updated.FirstName);
            if (index != -1){
                Elements[index] = updated;
                FilteredItems[index] = updated;
                Snackbar.Add($"FirstName: {Item.FirstName}, MiddleName: {Item.MiddleName}", Severity.Success);
            }
        }
    }


    private async Task OpenAddDialog()
    {
        var dialog = DialogService.Show<EditApplicationDailog>("Edit Application");
        DialogResult? result = await dialog.Result;

        if (!result.Canceled)
        {
            var Item = (ApplicationItem)result.Data;
            if (Item!=null){

                Elements.Add(Item);
                // FilteredItems.Add(Item);
                Snackbar.Add($"FirstName: {Item.FirstName}, MiddleName: {Item.MiddleName}", Severity.Success);
            }
        }
    }

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            FilteredItems = Elements;
        }
        else
        {
           FilteredItems = Elements.ToList().Where(item => 
                    (!string.IsNullOrEmpty(item.FirstName) && item.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ||
                    (!string.IsNullOrEmpty(item.LastName) && item.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))).ToObservableCollection(); 
                
        }
}
#endregion


}
